#!/usr/bin/env python

from __future__ import print_function
import os, subprocess, sys
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter, RawDescriptionHelpFormatter, RawTextHelpFormatter

# from ConfigArgParse
class ArgumentDefaultsRawHelpFormatter(
    ArgumentDefaultsHelpFormatter,
    RawTextHelpFormatter,
    RawDescriptionHelpFormatter):
    pass

if __name__=="__main__":
    # this tool only works in/for CMSSW
    CMSSW_BASE = os.getenv("CMSSW_BASE")
    if CMSSW_BASE is None:
        raise EnvironmentError("CMSSW_BASE not set")

    parser = ArgumentParser(
        formatter_class=ArgumentDefaultsRawHelpFormatter,
        description="Install python packages locally within a CMSSW area and update paths accordingly.",
        epilog="""
Notes:
* always call cmsenv after running this tool
* dir must start with '$CMSSW_BASE' to be relocatable (with `scram b ProjectRename`)
* default tool name will be updated to py3-local if python version 3 is selected
* pass pip args like -p="-I" (with equals sign and quotes)
* pip arg -I (--ignore-installed) is useful to prevent pip from trying to uninstall dependencies on cvmfs (read-only)
* if called without any packages, will just update scram tool (useful if anything was added to dir outside of this tool)
"""
    )
    parser.add_argument("-d","--dir", dest="dir", type=str, default="$CMSSW_BASE/local", help="path for pip install prefix")
    parser.add_argument("-t","--tool", dest="tool", type=str, default="py2-local", help="name for scram tool")
    parser.add_argument("-v","--version", dest="version", type=int, default=2, choices=[2,3], help="python version")
    parser.add_argument("-p","--pip-args", dest="pip_args", type=str, help="additional args for pip")
    parser.add_argument("packages", nargs='?', help="packages to install")
    args = parser.parse_args()

    # check for modern setup
    if "PYTHON3PATH" in os.environ:
        if args.version==3:
            exe = "python3"
            path = "PYTHON3PATH"
            if args.tool=="py2-local": args.tool = "py3-local"
        elif args.version==2:
            exe = "python2"
            path = "PYTHON27PATH"
    else:
        if args.version==3: parser.error("This CMSSW version is too old to use python3")
        exe = "python"
        path = "PYTHONPATH"

    full_dir = os.path.expandvars(args.dir)
    if not os.path.isdir(full_dir):
        os.makedirs(full_dir)
    if not os.path.isdir(full_dir):
        # failed for some reason
        raise RuntimeError("Failed to make dir: "+full_dir)

    # call pip (if any packages requested)
    if args.packages is not None and len(args.packages)>0:
        if not isinstance(args.packages,list): args.packages = [args.packages]
        call_args = [exe,"-m","pip","install","--prefix",full_dir]
        if args.pip_args is not None and len(args.pip_args)>0: call_args.append(args.pip_args)
        call_args.extend(args.packages)
        subprocess.check_call(call_args)

    # setup scram tool
    SCRAM_ARCH = os.getenv("SCRAM_ARCH")
    with open(CMSSW_BASE+"/config/toolbox/"+SCRAM_ARCH+"/tools/selected/"+args.tool+".xml",'w') as outfile:
        lines = [
            '<tool name="{}" version="1.0.0">'.format(args.tool),
        ]
        pathdir = args.dir+"/bin"
        if os.path.isdir(os.path.expandvars(pathdir)):
            lines.append('  <runtime name="PATH" type="path" value="{}"/>'.format(pathdir))
        libdir = args.dir+"/lib/python{:d}.{:d}/site-packages".format(sys.version_info.major,sys.version_info.minor)
        if os.path.isdir(os.path.expandvars(libdir)):
            lines.append('  <runtime name="{}" type="path" value="{}"/>'.format(path,libdir))
        lines.append('</tool>')
        outfile.write('\n'.join(lines))
    subprocess.check_call(['scram','setup',args.tool])

    # remember to run cmsenv afterward
    print("scram-pip succeeded! please call 'cmsenv' now")
